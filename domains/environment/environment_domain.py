import random
from dataclasses import dataclass
from enum import Enum


class EvidenceType(Enum):
    """Types of evidence that can be generated."""

    BASIC = "basic"
    EXTENDED = "extended"


@dataclass
class EnvironmentEvidence:
    """Evidence generated by the environment - dice roll and comparison results."""

    dice_roll: int
    comparison_results: list[str]


class Environment:
    """Environment domain that generates target values and evidence.

    Has no knowledge of probabilities - purely generates observable evidence.
    """

    def __init__(
        self,
        dice_sides: int = 6,
        evidence_type: EvidenceType = EvidenceType.BASIC,
        seed: int | None = None,
    ):
        """Initialize environment with dice configuration.

        Args:
            dice_sides: Number of sides on the dice (default 6)
            evidence_type: Type of evidence to generate (basic or extended)
            seed: Random seed for reproducible results
        """
        self.dice_sides = dice_sides
        self.evidence_type = evidence_type
        self._random_state = (
            random.Random(seed) if seed is not None else random.Random()
        )
        self._target_value = None

    def set_target_value(self, target: int) -> None:
        """Set the target die value that Player 2 must guess.

        Args:
            target: Target value (1 to dice_sides)
        """
        if not (1 <= target <= self.dice_sides):
            raise ValueError(f"Target must be between 1 and {self.dice_sides}")
        self._target_value = target

    def get_target_value(self) -> int:
        """Get the current target value.

        Returns:
            Current target value

        Raises:
            ValueError: If target value hasn't been set
        """
        if self._target_value is None:
            raise ValueError("Target value not set")
        return self._target_value

    def generate_random_target(self) -> int:
        """Generate and set a random target value.

        Returns:
            The generated target value
        """
        target = self._random_state.randint(1, self.dice_sides)
        self.set_target_value(target)
        return target

    def roll_dice_and_compare(self) -> EnvironmentEvidence:
        """Roll dice and compare to target, generating evidence.

        Returns:
            EnvironmentEvidence with dice roll and comparison results

        Raises:
            ValueError: If target value hasn't been set
        """
        if self._target_value is None:
            raise ValueError("Target value not set")

        dice_roll = self._random_state.randint(1, self.dice_sides)
        comparison_results = []

        # Basic evidence: higher/lower/same
        if dice_roll > self._target_value:
            comparison_results.append("higher")
        elif dice_roll < self._target_value:
            comparison_results.append("lower")
        else:
            comparison_results.append("same")

        # Extended evidence: half/double (only for extended type)
        if self.evidence_type == EvidenceType.EXTENDED:
            # Check for "half" - dice_roll = target/2 (exact integer only)
            if self._target_value % 2 == 0 and dice_roll == self._target_value // 2:
                comparison_results.append("half")

            # Check for "double" - dice_roll = target*2 (within dice range)
            if dice_roll == self._target_value * 2 and dice_roll <= self.dice_sides:
                comparison_results.append("double")

        return EnvironmentEvidence(
            dice_roll=dice_roll, comparison_results=comparison_results
        )
