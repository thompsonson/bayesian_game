from dataclasses import dataclass
from typing import Literal
import random


@dataclass
class EnvironmentEvidence:
    """Evidence generated by the environment - dice roll and comparison result."""
    dice_roll: int
    comparison_result: Literal["higher", "lower", "same"]


class Environment:
    """Environment domain that generates target values and evidence.
    
    Has no knowledge of probabilities - purely generates observable evidence.
    """
    
    def __init__(self, dice_sides: int = 6, seed: int = None):
        """Initialize environment with dice configuration.
        
        Args:
            dice_sides: Number of sides on the dice (default 6)
            seed: Random seed for reproducible results
        """
        self.dice_sides = dice_sides
        self._random_state = random.Random(seed) if seed is not None else random.Random()
        self._target_value = None
    
    def set_target_value(self, target: int) -> None:
        """Set the target die value that Player 2 must guess.
        
        Args:
            target: Target value (1 to dice_sides)
        """
        if not (1 <= target <= self.dice_sides):
            raise ValueError(f"Target must be between 1 and {self.dice_sides}")
        self._target_value = target
    
    def get_target_value(self) -> int:
        """Get the current target value.
        
        Returns:
            Current target value
            
        Raises:
            ValueError: If target value hasn't been set
        """
        if self._target_value is None:
            raise ValueError("Target value not set")
        return self._target_value
    
    def generate_random_target(self) -> int:
        """Generate and set a random target value.
        
        Returns:
            The generated target value
        """
        target = self._random_state.randint(1, self.dice_sides)
        self.set_target_value(target)
        return target
    
    def roll_dice_and_compare(self) -> EnvironmentEvidence:
        """Roll dice and compare to target, generating evidence.
        
        Returns:
            EnvironmentEvidence with dice roll and comparison result
            
        Raises:
            ValueError: If target value hasn't been set
        """
        if self._target_value is None:
            raise ValueError("Target value not set")
        
        dice_roll = self._random_state.randint(1, self.dice_sides)
        
        if dice_roll > self._target_value:
            comparison_result = "higher"
        elif dice_roll < self._target_value:
            comparison_result = "lower"
        else:
            comparison_result = "same"
        
        return EnvironmentEvidence(
            dice_roll=dice_roll,
            comparison_result=comparison_result
        )